package main

const GuestHeaderTemplate = `
// Code generated by OpenFFI. Modify only in marked places.
// Guest code for {{.IDLFilenameWithExtension}}
`

const GuestPackage = `package openffi;
`

const GuestImportsTemplate = `
import java.io.*;
import com.google.protobuf.*;
import java.util.*;
{{range $mindex, $i := .Imports}}
import {{$i}}.*;{{end}}
`

const GuestFunctionXLLRTemplate = `
{{range $mindex, $m := .Modules}}
// Code to call foreign functions in module {{$m.Name}}
public final class {{$m.Name}}
{
	{{range $findex, $f := $m.Functions}}
	// Call to foreign {{.PathToForeignFunction.function}}{{$ReturnValuesLength := len $f.ReturnValues}}
	public static CallResult EntryPoint_{{$f.PathToForeignFunction.function}}(byte[] params) throws InvalidProtocolBufferException, OpenFFIException
	{
		// deserialize from protobuf
		{{$f.ParametersType}} req = {{$f.ParametersType}}.parseFrom(params);

		// call function
		{{if eq $ReturnValuesLength 0}}{{else if gt $ReturnValuesLength 1}}{{$f.ReturnValuesType}}{{else}}{{$elem := index $f.ReturnValues 0}}{{$elem.Type}}{{end}} res = {{$m.Name}}.{{$f.PathToForeignFunction.function}}({{range $index, $elem := $f.Parameters}}{{if $index}},{{end}} req.{{$elem.Name}}{{end}});

		CallResult cr = new CallResult();

		{{if eq $ReturnValuesLength 0}}
		return cr;
		{{else if gt $ReturnValuesLength 1}}
		cr.out_ret = res.build().toByteArray();
		return cr;
		{{else}}{{$elem := index $f.ReturnValues 0}}
		// serialize {{$f.ReturnValuesType}} to protobuf
        {{$f.ReturnValuesType}} proto{{$f.ReturnValuesType}} =
                {{$f.ReturnValuesType}}.newBuilder()
                {{if $elem.IsArray}}.addAll{{Title $elem.Name}}(Arrays.asList({{$elem.Name}})){{else}}.set{{Title $elem.Name}}({{$elem.Name}}){{end}}
                .build();
        cr.out_ret = proto{{$f.ReturnValuesType}}.toByteArray();
        return cr;
		{{end}}
	}
	{{end}}

}
{{end}}
`
