
// Code generated by MetaFFI. DO NOT EDIT.
// Host code for {{.IDLFilenameWithExtension}}
package metaffi_host;

import java.io.*;
import java.util.*;
import metaffi.*;




// Code to call foreign functions in module TestModule via MetaFFI

public final class TestModule
{
	public static MetaFFIBridge metaffi;
	private static metaffi.MetaFFIBridge metaffiBridge = new metaffi.MetaFFIBridge();

	

	
	public static long f1ID = 0;
	

	

	public static void load(String modulePath)
	{
		metaffi = new MetaFFIBridge();
		metaffi.load_runtime_plugin("xllr.test");

		

		
		f1ID = metaffi.load_function("xllr.test", modulePath, "function=f1,metaffi_guest_lib=,module=$PWD/temp,package=GoFuncs", (byte)14, (byte)14);
		

		
	}

	
	

	
	
	
	public static class f1Result
	{
		public double r1;
		public float r2;
		public byte r3;
		public short r4;
		public int r5;
		public long r6;
		public byte r7;
		public short r8;
		public int r9;
		public long r10;
		public boolean r11;
		public String r12;
		public String[] r13;
		public byte[] r14;
	}

	public static f1Result f1( double p1 ,float p2 ,byte p3 ,short p4 ,int p5 ,long p6 ,byte p7 ,short p8 ,int p9 ,long p10 ,boolean p11 ,String p12 ,String[] p13 ,byte[] p14 ) throws MetaFFIException
	{
		
		long xcall_params = metaffiBridge.alloc_cdts((byte)14, (byte)14);
		long parametersCDTS = metaffiBridge.get_pcdt(xcall_params, (byte)0);
		long return_valuesCDTS = metaffiBridge.get_pcdt(xcall_params, (byte)1);


		Object[] objectParams = new Object[]{ p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14 };
		metaffiBridge.java_to_cdts(parametersCDTS, objectParams, new long[]{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 4096, 69632, 65600 });


		metaffiBridge.xcall_params_ret(f1ID, xcall_params);


		f1Result returnValuesResult = new f1Result();
		Object[] rets = metaffiBridge.cdts_to_java(return_valuesCDTS, 14);
		returnValuesResult.r1 = (double)rets[0];
		returnValuesResult.r2 = (float)rets[1];
		returnValuesResult.r3 = (byte)rets[2];
		returnValuesResult.r4 = (short)rets[3];
		returnValuesResult.r5 = (int)rets[4];
		returnValuesResult.r6 = (long)rets[5];
		returnValuesResult.r7 = (byte)rets[6];
		returnValuesResult.r8 = (short)rets[7];
		returnValuesResult.r9 = (int)rets[8];
		returnValuesResult.r10 = (long)rets[9];
		returnValuesResult.r11 = (boolean)rets[10];
		returnValuesResult.r12 = (String)rets[11];
		returnValuesResult.r13 = (String[])rets[12];
		returnValuesResult.r14 = (byte[])rets[13];
		return returnValuesResult;

		
	}
	
}

