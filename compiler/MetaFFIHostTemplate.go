package main

const MetaFFIHostHeaderTemplate = `
// Code generated by MetaFFI. DO NOT EDIT.
// Host code for {{.IDLFilenameWithExtension}}
`

const MetaFFIImportsTemplate = `
import api.MetaFFIRuntime;
import api.MetaFFIModule;
import metaffi.*;
import java.util.*;
`

const RuntimeInitializationTemplate = `
// Initialize MetaFFI runtime
private static MetaFFIRuntime runtime;
private static MetaFFIModule module;

static {
    try {
        runtime = new MetaFFIRuntime("{{.TargetLanguage}}");
        runtime.loadRuntimePlugin();
        module = runtime.loadModule("{{range .Modules}}{{.Name}}{{end}}");
    } catch (Exception e) {
        throw new RuntimeException("Failed to initialize MetaFFI runtime", e);
    }
}
`

const FunctionsTemplate = `
{{range .Modules}}
// Functions for module {{.Name}}
{{range .Functions}}
public static {{if .ReturnValues}}{{range $ret := .ReturnValues}}{{ConvertToJavaType $ret}}{{end}}{{else}}void{{end}} {{.Name}}({{range $index, $param := .Parameters}}{{if $index}}, {{end}}{{ConvertToJavaType $param}} {{$param.Name}}{{end}}) throws Exception {
    """
    Call foreign function {{.Name}}
    """
    try {
        // Load entity if not already loaded
        metaffi.Caller entity = module.load("{{.EntityPath}}", 
                                           {{if .Parameters}}new MetaFFITypeInfo[]{ {{range $index, $param := .Parameters}}{{if $index}}, {{end}}{{GetMetaFFIType $param}}{{end}} }{{else}}null{{end}},
                                           {{if .ReturnValues}}new MetaFFITypeInfo[]{ {{range $index, $ret := .ReturnValues}}{{if $index}}, {{end}}{{GetMetaFFIType $ret}}{{end}} }{{else}}null{{end}});
        
        // Call the foreign function
        {{if .ReturnValues}}Object result = {{end}}entity.call({{range $index, $param := .Parameters}}{{if $index}}, {{end}}{{$param.Name}}{{end}});
        {{if .ReturnValues}}return ({{range $ret := .ReturnValues}}{{ConvertToJavaType $ret}}{{end}})((Object[])result)[0];{{end}}
    } catch (Exception e) {
        throw new RuntimeException("Failed to call foreign function {{.Name}}: " + e.getMessage(), e);
    }
}

{{end}}
{{end}}
`

const ClassesTemplate = `
{{range .Modules}}
// Classes for module {{.Name}}
{{range .Classes}}
public class {{.Name}} {
    """
    Java wrapper for foreign class {{.Name}}
    """
    
    private MetaFFIHandle handle;
    
    {{range .Constructors}}
    public {{$className := .Name}}{{if eq $className ""}}{{$className = "{{.Name}}"}}{{end}}{{$className}}({{range $index, $param := .Parameters}}{{if $index}}, {{end}}{{ConvertToJavaType $param}} {{$param.Name}}{{end}}) throws Exception {
        """
        Initialize {{.Name}} instance
        """
        try {
            // Load constructor entity
            metaffi.Caller constructor_entity = module.load("{{.EntityPath}}", 
                                                          {{if .Parameters}}new MetaFFITypeInfo[]{ {{range $index, $param := .Parameters}}{{if $index}}, {{end}}{{GetMetaFFIType $param}}{{end}} }{{else}}null{{end}},
                                                          {{if .ReturnValues}}new MetaFFITypeInfo[]{ {{range $index, $ret := .ReturnValues}}{{if $index}}, {{end}}{{GetMetaFFIType $ret}}{{end}} }{{else}}null{{end}});
            
            // Call constructor
            Object result = constructor_entity.call({{range $index, $param := .Parameters}}{{if $index}}, {{end}}{{$param.Name}}{{end}});
            this.handle = (MetaFFIHandle)((Object[])result)[0];
        } catch (Exception e) {
            throw new RuntimeException("Failed to initialize {{.Name}}: " + e.getMessage(), e);
        }
    }
    
    {{end}}
    
    public {{.Name}}(MetaFFIHandle handle) {
        this.handle = handle;
    }
    
    public MetaFFIHandle getHandle() {
        return this.handle;
    }
    
    {{range .Methods}}
    public {{if .ReturnValues}}{{range $ret := .ReturnValues}}{{ConvertToJavaType $ret}}{{end}}{{else}}void{{end}} {{.Name}}({{range $index, $param := .Parameters}}{{if $index}}, {{end}}{{ConvertToJavaType $param}} {{$param.Name}}{{end}}) throws Exception {
        """
        Call foreign method {{.Name}}
        """
        try {
            // Load method entity
            metaffi.Caller entity = module.load("{{.EntityPath}}", 
                                               {{if .Parameters}}new MetaFFITypeInfo[]{ {{range $index, $param := .Parameters}}{{if $index}}, {{end}}{{GetMetaFFIType $param}}{{end}} }{{else}}null{{end}},
                                               {{if .ReturnValues}}new MetaFFITypeInfo[]{ {{range $index, $ret := .ReturnValues}}{{if $index}}, {{end}}{{GetMetaFFIType $ret}}{{end}} }{{else}}null{{end}});
            
            // Call the method
            {{if .ReturnValues}}Object result = {{end}}entity.call(this.handle{{range $index, $param := .Parameters}}, {{$param.Name}}{{end}});
            {{if .ReturnValues}}return ({{range $ret := .ReturnValues}}{{ConvertToJavaType $ret}}{{end}})((Object[])result)[0];{{end}}
        } catch (Exception e) {
            throw new RuntimeException("Failed to call method {{.Name}}: " + e.getMessage(), e);
        }
    }
    
    {{end}}
    
    {{range .Fields}}
    {{if .Getter}}
    public {{if .Getter.ReturnValues}}{{range $ret := .Getter.ReturnValues}}{{ConvertToJavaType $ret}}{{end}}{{else}}void{{end}} get{{Title .Name}}() throws Exception {
        """
        Getter for field {{.Name}}
        """
        try {
            // Load getter entity
            metaffi.Caller entity = module.load("{{.Getter.EntityPath}}", 
                                               {{if .Getter.Parameters}}new MetaFFITypeInfo[]{ {{range $index, $param := .Getter.Parameters}}{{if $index}}, {{end}}{{GetMetaFFIType $param}}{{end}} }{{else}}null{{end}},
                                               {{if .Getter.ReturnValues}}new MetaFFITypeInfo[]{ {{range $index, $ret := .Getter.ReturnValues}}{{if $index}}, {{end}}{{GetMetaFFIType $ret}}{{end}} }{{else}}null{{end}});
            
            // Call the getter
            Object result = entity.call(this.handle{{range $index, $param := .Getter.Parameters}}, {{$param.Name}}{{end}});
            return ({{range $ret := .Getter.ReturnValues}}{{ConvertToJavaType $ret}}{{end}})((Object[])result)[0];
        } catch (Exception e) {
            throw new RuntimeException("Failed to get field {{.Name}}: " + e.getMessage(), e);
        }
    }
    
    {{end}}
    {{if .Setter}}
    public void set{{Title .Name}}({{range $index, $param := .Setter.Parameters}}{{if eq $index 1}}{{ConvertToJavaType $param}} {{$param.Name}}{{end}}{{end}}) throws Exception {
        """
        Setter for field {{.Name}}
        """
        try {
            // Load setter entity
            metaffi.Caller entity = module.load("{{.Setter.EntityPath}}", 
                                               {{if .Setter.Parameters}}new MetaFFITypeInfo[]{ {{range $index, $param := .Setter.Parameters}}{{if $index}}, {{end}}{{GetMetaFFIType $param}}{{end}} }{{else}}null{{end}},
                                               {{if .Setter.ReturnValues}}new MetaFFITypeInfo[]{ {{range $index, $ret := .Setter.ReturnValues}}{{if $index}}, {{end}}{{GetMetaFFIType $ret}}{{end}} }{{else}}null{{end}});
            
            // Call the setter
            entity.call(this.handle{{range $index, $param := .Setter.Parameters}}, {{$param.Name}}{{end}});
        } catch (Exception e) {
            throw new RuntimeException("Failed to set field {{.Name}}: " + e.getMessage(), e);
        }
    }
    
    {{end}}
    {{end}}
    
    {{if .Releaser}}
    public void release() throws Exception {
        """
        Cleanup foreign object
        """
        try {
            if (this.handle != null) {
                // Load releaser entity
                metaffi.Caller entity = module.load("{{.Releaser.EntityPath}}", 
                                                   {{if .Releaser.Parameters}}new MetaFFITypeInfo[]{ {{range $index, $param := .Releaser.Parameters}}{{if $index}}, {{end}}{{GetMetaFFIType $param}}{{end}} }{{else}}null{{end}},
                                                   {{if .Releaser.ReturnValues}}new MetaFFITypeInfo[]{ {{range $index, $ret := .Releaser.ReturnValues}}{{if $index}}, {{end}}{{GetMetaFFIType $ret}}{{end}} }{{else}}null{{end}});
                
                // Call the releaser
                entity.call(this.handle{{range $index, $param := .Releaser.Parameters}}, {{$param.Name}}{{end}});
                this.handle = null;
            }
        } catch (Exception e) {
            // Log cleanup errors but don't throw
            System.err.println("Warning: Failed to cleanup {{.Name}} object: " + e.getMessage());
        }
    }
    
    @Override
    protected void finalize() throws Throwable {
        try {
            release();
        } finally {
            super.finalize();
        }
    }
    
    {{end}}
}
{{end}}
{{end}}
`

const GlobalsTemplate = `
{{range .Modules}}
// Global variables for module {{.Name}}
{{range .Globals}}
{{if .Getter}}
public static {{if .Getter.ReturnValues}}{{range $ret := .Getter.ReturnValues}}{{ConvertToJavaType $ret}}{{end}}{{else}}void{{end}} get{{Title .Name}}() throws Exception {
    """
    Getter for global variable {{.Name}}
    """
    try {
        // Load getter entity
        metaffi.Caller entity = module.load("{{.Getter.EntityPath}}", 
                                           {{if .Getter.Parameters}}new MetaFFITypeInfo[]{ {{range $index, $param := .Getter.Parameters}}{{if $index}}, {{end}}{{GetMetaFFIType $param}}{{end}} }{{else}}null{{end}},
                                           {{if .Getter.ReturnValues}}new MetaFFITypeInfo[]{ {{range $index, $ret := .Getter.ReturnValues}}{{if $index}}, {{end}}{{GetMetaFFIType $ret}}{{end}} }{{else}}null{{end}});
        
        // Call the getter
        Object result = entity.call({{range $index, $param := .Getter.Parameters}}{{if $index}}, {{end}}{{$param.Name}}{{end}});
        return ({{range $ret := .Getter.ReturnValues}}{{ConvertToJavaType $ret}}{{end}})((Object[])result)[0];
    } catch (Exception e) {
        throw new RuntimeException("Failed to get global {{.Name}}: " + e.getMessage(), e);
    }
}

{{end}}
{{if .Setter}}
public static void set{{Title .Name}}({{range $index, $param := .Setter.Parameters}}{{if eq $index 1}}{{ConvertToJavaType $param}} {{$param.Name}}{{end}}{{end}}) throws Exception {
    """
    Setter for global variable {{.Name}}
    """
    try {
        // Load setter entity
        metaffi.Caller entity = module.load("{{.Setter.EntityPath}}", 
                                           {{if .Setter.Parameters}}new MetaFFITypeInfo[]{ {{range $index, $param := .Setter.Parameters}}{{if $index}}, {{end}}{{GetMetaFFIType $param}}{{end}} }{{else}}null{{end}},
                                           {{if .Setter.ReturnValues}}new MetaFFITypeInfo[]{ {{range $index, $ret := .Setter.ReturnValues}}{{if $index}}, {{end}}{{GetMetaFFIType $ret}}{{end}} }{{else}}null{{end}});
        
        // Call the setter
        entity.call({{range $index, $param := .Setter.Parameters}}{{if $index}}, {{end}}{{$param.Name}}{{end}});
    } catch (Exception e) {
        throw new RuntimeException("Failed to set global {{.Name}}: " + e.getMessage(), e);
    }
}

{{end}}
{{end}}
{{end}}
`

const MainClassTemplate = `
{{range .Modules}}
// Code generated by MetaFFI. DO NOT EDIT.
import api.MetaFFIRuntime;
import api.MetaFFIModule;
import metaffi.*;
import java.util.*;

public class {{.Name}}_MetaFFIHost {
    // Initialize MetaFFI runtime
    private static MetaFFIRuntime runtime;
    private static MetaFFIModule module;
    
    static {
        try {
            runtime = new MetaFFIRuntime("{{$.TargetLanguage}}");
            runtime.loadRuntimePlugin();
            module = runtime.loadModule("{{.Name}}");
        } catch (Exception e) {
            throw new RuntimeException("Failed to initialize MetaFFI runtime", e);
        }
    }
    
    {{range .Functions}}
    public static {{if .ReturnValues}}{{range $ret := .ReturnValues}}{{ConvertToJavaType $ret}}{{end}}{{else}}void{{end}} {{.Name}}({{range $index, $param := .Parameters}}{{if $index}}, {{end}}{{ConvertToJavaType $param}} {{$param.Name}}{{end}}) throws Exception {
        try {
            // Load entity if not already loaded
            metaffi.Caller entity = module.load("{{.EntityPath}}", 
                                               {{if .Parameters}}new MetaFFITypeInfo[]{ {{range $index, $param := .Parameters}}{{if $index}}, {{end}}{{GetMetaFFIType $param}}{{end}} }{{else}}null{{end}},
                                               {{if .ReturnValues}}new MetaFFITypeInfo[]{ {{range $index, $ret := .ReturnValues}}{{if $index}}, {{end}}{{GetMetaFFIType $ret}}{{end}} }{{else}}null{{end}});
            
            // Call the foreign function
            {{if .ReturnValues}}Object result = {{end}}entity.call({{range $index, $param := .Parameters}}{{if $index}}, {{end}}{{$param.Name}}{{end}});
            {{if .ReturnValues}}return ({{range $ret := .ReturnValues}}{{ConvertToJavaType $ret}}{{end}})((Object[])result)[0];{{end}}
        } catch (Exception e) {
            throw new RuntimeException("Failed to call foreign function {{.Name}}: " + e.getMessage(), e);
        }
    }
    
    {{end}}
    
    // Cleanup method
    public static void cleanup() {
        try {
            if (runtime != null) {
                runtime.releaseRuntimePlugin();
            }
        } catch (Exception e) {
            System.err.println("Warning: Failed to cleanup MetaFFI runtime: " + e.getMessage());
        }
    }
}
{{end}}
`
