import SCons.Environment
import SCons.Script
import SCons.Node
import SCons.Node.FS
import glob
import SCons.Script.SConsOptions
import compiler_options
import post_actions
import platform
import scons_utils
from site_scons import ALIAS_OPENJDK, ALIAS_OPENJDK_UNITTESTS

# * Import the parent Environment
env: SCons.Environment.Environment
SCons.Script.Import('env')


# * ---- Build xllr.openjdk.bridge C++ dynamic library ----
env_openjdk_bridge = env.Clone() # use the same environment as the parent project
env_openjdk_bridge.LoadConanPackagesInfo()

# sources
source = env['sdk_src']
source += [s for s in glob.glob(env.Dir('.').abspath + '/*.cpp') if not s.endswith("_test.cpp")]

# includes
includes = [env['sdk_path']]
includes.append(env_openjdk_bridge.Dir('.').abspath)

os_specific_include_path = '/win32/' if env_openjdk_bridge.IsWindows() else '/linux/'
includes.append(env_openjdk_bridge['conan_info']['openjdk']['CPPPATH'][0]+f'{os_specific_include_path}')

libpath = []

# linked libraries
if env_openjdk_bridge.IsWindows():
	# add the jvm.lib and xllr.openjdk.lib to the linker
	libs = ['jvm.lib', env['xllr_openjdk_dylib'][1].abspath]
else:
	# add the jvm.so and xllr.openjdk.so to the linker
	libs = ['jvm.so']
	libpath.append(env['METAFFI_HOME']+'/openjdk')
	libpath.append(env_openjdk_bridge['conan_info']['openjdk']['LIBPATH'][0]+'/server')


xllr_openjdk_bridge_dylib = env_openjdk_bridge.CPPSharedLibrary(target='xllr.openjdk.jni.bridge',
																 project_name='openjdk_jni_bridge',
																 sources=source,
																 include_dirs=includes,
																 lib_dirs=libpath,
																 libs=libs)
env_openjdk_bridge.Depends(xllr_openjdk_bridge_dylib, env['xllr_openjdk_dylib'])

xllr_openjdk_bridge_install = env_openjdk_bridge.Install(env_openjdk_bridge['METAFFI_HOME']+'/openjdk', xllr_openjdk_bridge_dylib) # install only dll.

# to be used by other targets in the project as dependency
env['xllr_openjdk_bridge_dylib'] = xllr_openjdk_bridge_dylib


# * ---- Build xllr.openjdk.bridge jar ----
env_openjdk_bridge_jar = env.Clone()
xllr_bridge_jar = env_openjdk_bridge_jar.JavaJar(target='xllr.openjdk.bridge.jar',
												source=env_openjdk_bridge_jar.Glob('./*.java'),
												project_name='openjdk_bridge')
												
xllr_bridge_jar_install = env_openjdk_bridge_jar.Install(env_openjdk_bridge_jar['METAFFI_HOME']+'/openjdk', xllr_bridge_jar)
env_openjdk_bridge_jar.Depends(xllr_bridge_jar, xllr_openjdk_bridge_dylib)

env['xllr_openjdk_bridge_jar'] = xllr_bridge_jar

SCons.Script.Alias(ALIAS_OPENJDK, [xllr_openjdk_bridge_dylib, xllr_openjdk_bridge_install, xllr_bridge_jar, xllr_bridge_jar_install])

