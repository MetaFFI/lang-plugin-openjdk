from re import S
import SCons.Environment
import SCons.Script
import SCons.Node
import SCons.Node.FS
import glob
import SCons.Script.SConsOptions
import compiler_options
import post_actions
import platform
import scons_utils
from site_scons import ALIAS_OPENJDK, ALIAS_OPENJDK_UNITTESTS

# * Import the parent Environment
env: SCons.Environment.Environment
SCons.Script.Import('env')


# * ---- Build xllr.openjdk C++ dynamic library ----
env_xllr_openjdk = env.Clone() # use the same environment as openjdk project
env_xllr_openjdk.LoadConanPackagesInfo()

# sources
source = env['sdk_src']
source += [s for s in glob.glob(env.Dir('.').abspath + '/*.cpp') if not s.endswith("_test.cpp")]

# includes
includes = [env['sdk_path']]
includes.append(env_xllr_openjdk.Dir('.').abspath)

os_specific_include_path = '/win32/' if env_xllr_openjdk.IsWindows() else '/linux/'
includes.append(env_xllr_openjdk['conan_info']['openjdk']['CPPPATH'][0]+f'{os_specific_include_path}')

# linked libraries
if env_xllr_openjdk.IsWindows():
	# add the jvm.lib and xllr.openjdk.lib to the linker
	libs = ['jvm.lib']
else:
	# add the jvm.so and xllr.openjdk.so to the linker
	libs = ['jvm.so']

# library directories
libpath = []
if not env_xllr_openjdk.IsWindows():
	libpath.append(env_xllr_openjdk['conan_info']['openjdk']['LIBPATH'][0]+'/server')

xllr_openjdk_dylib = env_xllr_openjdk.CPPSharedLibrary(target='xllr.openjdk',
														project_name='openjdk',
														sources=source,
														include_dirs=includes,
														lib_dirs=libpath,
														libs=libs)

xllr_openjdk_install = env_xllr_openjdk.Install(env_xllr_openjdk['METAFFI_HOME']+'/openjdk', xllr_openjdk_dylib) # installs xllr.

# install boost_filesystem
xllr_openjdk_dependencies_install = env_xllr_openjdk.Install(env_xllr_openjdk['METAFFI_HOME']+'/openjdk', env_xllr_openjdk.SearchConanBinaryFile('boost', f'*boost_filesystem*'))

if not env_xllr_openjdk.IsWindows(): # non-windows also uses boost thread
	xllr_openjdk_dependencies_install.extend(env_xllr_openjdk.Install(env_xllr_openjdk['METAFFI_HOME']+'/openjdk', env_xllr_openjdk.SearchConanBinaryFile('boost', f'*boost_thread*')))
	xllr_openjdk_dependencies_install.extend(env_xllr_openjdk.Install(env_xllr_openjdk['METAFFI_HOME']+'/openjdk', env_xllr_openjdk.SearchConanBinaryFile('boost', f'*boost_stacktrace_from_exception*')))
	
	# TODO: copy libjvm.so to the openjdk directory
	#xllr_openjdk_dependencies_install.extend(env_xllr_openjdk.Install(env_xllr_openjdk['METAFFI_HOME']+'/openjdk', env_xllr_openjdk.SearchConanBinaryFile('openjdk', f'*libjvm*')))


SCons.Script.Alias(ALIAS_OPENJDK, [xllr_openjdk_dylib, xllr_openjdk_install, xllr_openjdk_dependencies_install])

# to be used by other targets in the project as dependency
env['xllr_openjdk_dylib'] = xllr_openjdk_dylib

# * --- Unit Tests ---
test_env = env.Clone()
test_env.LoadConanPackagesInfo()
includes = []
includes.extend(test_env['sdk_includes'])
includes.append(test_env['sdk_path'])
os_specific_include_path = '/win32/' if env_xllr_openjdk.IsWindows() else '/linux/'
includes.append(env_xllr_openjdk['conan_info']['openjdk']['CPPPATH'][0]+f'{os_specific_include_path}')

libs = []
lib_dirs = []
if env.IsWindows():
	libs = scons_utils.search_lib_in_nodeslist(xllr_openjdk_dylib)
else:
	libs.append('-l:xllr.openjdk.so')
	libs.append('jvm.so')
	lib_dirs.append(env['METAFFI_HOME']+'/openjdk')
	lib_dirs.append(env_xllr_openjdk['conan_info']['openjdk']['LIBPATH'][0]+'/server')

	# Append $METAFFI_HOME/openjdk to PATH or LD_LIBRARY_PATH
	if test_env.IsWindows():
		test_env.AppendENVPath('PATH', test_env['METAFFI_HOME']+'/openjdk')
	else:
		test_env.AppendENVPath('LD_LIBRARY_PATH', test_env['METAFFI_HOME']+'/openjdk')

# dependent on XLLR dynamic library
CDTS_java_test_env = test_env.Clone()
cdts_java_test: SCons.Node.NodeList = CDTS_java_test_env.CPPProgram(target='CDTS_java_test',
															project_name='openjdk',
															sources=[
																test_env.Dir('.').File('cdts_java_test.cpp').abspath
															],
															include_dirs=[
																includes
															],
															lib_dirs=lib_dirs,
															libs=libs)

CDTS_java_test_env.AddPostAction(cdts_java_test, post_actions.execute_doctest_unitest)
CDTS_java_test_env.AlwaysBuild(cdts_java_test)
env.Depends(cdts_java_test, ALIAS_OPENJDK)

openjdk_api_test_env = test_env.Clone()
openjdk_api_test: SCons.Node.NodeList = openjdk_api_test_env.CPPProgram(target='openjdk_api_test',
															project_name='openjdk',
															sources=[
																test_env.Dir('.').File('openjdk_api_test.cpp').abspath
															],
															include_dirs=[
																includes
															],
															lib_dirs=lib_dirs,
															libs=libs)
test_env.AlwaysBuild(openjdk_api_test)

# build ./test/*.java to be used by openjdk_api_test
java_env = test_env.Clone()
java_test_file = java_env.Java(target=test_env.Dir('./test').abspath, source=test_env.Glob('./test/*.java'))
env.Depends(java_test_file, xllr_openjdk_dylib)

test_env.AddPostAction(openjdk_api_test, post_actions.execute_doctest_unitest)
env.Depends(openjdk_api_test, java_test_file)


SCons.Script.Alias(ALIAS_OPENJDK_UNITTESTS, [cdts_java_test, openjdk_api_test])

